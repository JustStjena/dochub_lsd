entities:
  sequences:
    title: Диаграммы последовательности
    description: Бизнес-сценарии в формате Sequence-диаграмм
    menu: >
      (
        $sequences := $.sequences;
        /* Функция для вычисления пути к документу, с учетом возможной вложенности */
        $makeLocation := function($id) {(
          $arrleft := function($arr, $count) {
            $map($arr, function($v, $i) {
              $i <= $count ? $v
            })

          };
          $domains := $split($id, ".");
          "Документы/Sequence диаграммы/" & $join($map($domains, function($domain, $index) {(
            $lookup($sequences, $join($arrleft($domains, $index), ".")).title
          )}), "/");
        )};

        $append([{
          "icon": "swap_horiz",
          "link": "entities/sequences/tree",
          "location": "Документы/Sequence диаграммы"
        }],
          [$.sequences.$spread().{
            "icon": *.icon,
            "link": "entities/sequences/blank?id=" & $keys()[0],
            /* Можно явно указать адрес схемы через location */ 
            "location": *.location ? *.location : $makeLocation($keys()[0])
          }][location]
        );
      )
    presentations:
      blank:
        type: plantuml
        template: templates/sequences/blank.puml
        source: > # Для рендера шаблона собираем список задействованных в steps компонентов и данные самого описания, обогащенные ссылками на контракты
          (          
              $components := $.components;
              $obj := $lookup($.sequences, $params.id); 
              $makeLink := function($entity) {(
                /* В зависимости от контракта ссылка формируется разными способами */
                $entity.contract ? 
                  $join([
                    "[[",
                    $substring($entity.contract, 0, 4) = 'http' ?
                      "" : /* готовые ссылки не трогаем, выведем как есть */
                      $contains($entity.contract, "/") ? 
                        "/" : /* наличие слэша говорит, что это ссылка на документ докхаба, в том числе на другую диаграмму */
                        "/docs/", /* по умолчанию считаем, что все прочее это id документа */
                      $entity.contract,
                      " ",
                      $entity.value,
                      "]]"
                  ]) : 
                  $entity.value; /* контракт не указан, ссылки не будет */
              )};
              
              $components := $distinct($obj.groups.steps.$spread().($merge([{"id": $.from}, {"id": $.to}, $res]))).$spread().( 
                  $component := $lookup($components, $.id);
                  $component ? 
                    { /* компонент с таким id есть, линкуем */
                        "id": $.id,
                        "entity": $component.entity in ['actor', 'database', 'queue', 'collections', 'entity'] ? $component.entity : "participant",
                        "value": "[[/architect/components/" & $.id & " " & $component.title & "]]"
                    } : 
                    { /* покажем простой блок с текстом */
                      "id": $.id,
                      "entity": "participant",
                      "value": $.id
                    }
              );

              $merge([{"components": $components, "title":$obj.title}, {
                  "groups": $obj.groups.(
                  {
                      "title": $.title,
                      "steps": $map($.steps, function($v, $i) {
                          {
                              "from": $components[id=$v.from].id,
                              "to": $components[id=$v.to].id,
                              /* Проверяем, нужна ли стрелка с возвратом управления. Если текст не указан, подставляем пробел */
                              "return": $exists($v.return) ? ($v.return ? $v.return : " ") : false,
                              "value": $makeLink($v)
                          }
                      }),
                      "triggers": $.triggers,
                      "results": $.results
                  }
              )
              }])


          )
      tree: # Идентификатор представления. Дерево объектов.
        type: plantuml  # Тип представления. Обязательно.
        template: templates/sequences/tree.puml   # Путь к шаблону. Обязательно.
        source: >       # Источник данных для рендера шаблона. Возвращает дерево объектов "sequences". Обязательно.
          (
              $set("prev-id", undefined);
              $arrleft := function($arr ,$count) {
                  $map($arr, function($v, $i) {
                      $i <= $count ? $v
                  })
              };
              $sequences := $.sequences;
              [$sequences.$spread().($merge([{"id" : $keys()[0]}, $.*]))^(id).(
                  $prev_nodes := $split($get("prev-id"), ".");
                  $prev_level := $count($prev_nodes);
                  $curr_nodes := $split(id, ".");
                  $set("isdiff", false);
                  $result := $map($curr_nodes, function($v, $i) {(
                      $set("isdiff", $get("isdiff") or $prev_level = 0 or $prev_level <= $i or $v != $prev_nodes[$i]) ? (
                          $id := $join($arrleft($curr_nodes, $i), ".");
                          $sequence :=  $lookup($sequences, $id);
                          {
                              "id": $id,
                              "level": $pad("", $i + 2, "*"),
                              "title": $sequence ? $sequence.title : $id,
                              "link": "/entities/sequences/blank?id=" & $id
                          }
                      );
                  )});
                  $set("prev-id", id);
                  $result 
              )];
          )
    schema: # JSON Schema контролирующая описание объекта сущности
      type: object
      patternProperties:
        "[a-zA-Z0-9_\\.]*":
          type: object
          additionalProperties: false
          properties:
            icon:
              title: Иконка
              type: string
              minLength: 2
            title:
              title: Наименование
              type: string
              minLength: 5
            location:
              title: Путь к документу
              type: string
              minLength: 2
            groups:
              title: Блок действий
              type: array
              minLength: 1
              items:
                type: object
                properties:
                  title:
                    type: string
                    title: Заголовок блока
                  triggers:
                    title: Первоначальное состояние или активирующее действие
                    type: array
                    minItems: 1
                    items:
                      type: string
                      minLength: 5
                  steps:
                    title: Описание взаимодействия
                    type: array
                    minItems: 1
                    items:
                      type: object
                      properties:
                        from:
                          title: От кого
                          type: string
                          minLength: 1
                        to:
                          title: Кому
                          type: string
                          minLength: 1
                        value:
                          title: Что
                          type: string
                          minLength: 1
                        contract:
                          title: Ссылка на документ или внешний ресурс
                          type: string
                          minLength: 1
                        return:
                          anyOf:
                            - type: 'null'
                            - type: string
                          title: Признак возврата управления
                      required:
                        - from
                        - to
                        - value
                  results:
                    title: Результаты взаимодействия
                    type: array
                    minItems: 1
                    items:
                      type: string
                      minLength: 5
                required:
                  - steps
          required:
            - title
            - groups

rules:
  validators:
    sequences:
      title: Валидатор последовательностей
      source: >
        (
          $validator := $jsonschema($.entities.sequences.schema.patternProperties.*); /* Передаем схему в части отдельного объекта, а не всех sequences */
          ([([
            $.sequences.$spread().( /* Сканируем все последовательности */
              $ID := $keys()[0];
              {
                "id": $ID,											/* Запоминаем идентификатор компонента */
                "isvalid": $validator($.*)							/* Валидируем компонент по схеме */									
              }
            )        
          ][isvalid != true]).isvalid.{  /* Генерируем отклонения по выявленным нарушениям */
            "uid": $.params.*[0] & "-sequence-" & %.id,				/* Уникальный идентификатор выявленной ошибки */
            "location": "/entities/sequences/blank?id=" & %.id,		/* Ссылка на расположение объекта ошибки */
            "correction": "Исправьте ошибку",						          
            "description": $.message
          }])
        
        )